# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.2.3
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3.9'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: dockerfiles/Dockerfile_airflow
  networks:
    - default_net
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW_UID: 50000
    AIRFLOW_GID: 0
    _PIP_ADDITIONAL_REQUIREMENTS:
  env_file:
    - ./.env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./spark/app:/opt/bitnami/spark/app
    - ./spark/jars:/opt/bitnami/spark/jars
    - logs-volume:/opt/airflow/logs
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

x-spark-common:
  &spark-common
  build:
    context: .
    dockerfile: dockerfiles/Dockerfile_spark
  networks:
    - default_net
  user: root
  environment:
    &spark-common-env
    SPARK_RPC_AUTHENTICATION_ENABLED: 'no'
    SPARK_RPC_ENCRYPTION_ENABLED: 'no'
    SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: 'no'
    SPARK_SSL_ENABLED: 'no'
  env_file:
    - ./.env
  volumes:
    - ./spark/app:/opt/bitnami/spark/app # Spark scripts folder (Must be the same path in airflow and Spark Cluster)

services:
  postgres:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile_postgres
    networks:
      - default_net
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    networks:
      - default_net
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command:
      - webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    restart: always

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  spark:
    <<: *spark-common
    hostname: spark
    environment:
      <<: *spark-common-env
      SPARK_MODE: 'master'
    ports:
      - "8181:8080"
      - "7077:7077"

  spark-worker-1:
    <<: *spark-common
    environment:
      <<: *spark-common-env
      SPARK_MODE: 'worker'
      SPARK_MASTER_URL: 'spark://spark:7077'
      SPARK_WORKER_MEMORY: '1G'
      SPARK_WORKER_CORES: 1

  jupyter-spark:
    image: jupyter/pyspark-notebook:latest
    networks:
      - default_net
    ports:
      - "8888:8888"
      - "4040-4080:4040-4080"
    volumes:
      - ./notebooks:/home/tm/work/notebooks/
      - ./spark:/home/tm/work/data/


networks:
    default_net:

volumes:
  postgres-db-volume:
  logs-volume: